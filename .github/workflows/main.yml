name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    tags:
    - 'v*.*.*'

jobs:
  rust_checks:
    name: ${{ matrix.task.name }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      SCCACHE_CACHE_SIZE: 1G
      CACHE_PREFIX: v1
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        task:
          - name: Test
            run: cargo test

          - name: Format
            run: |
              rustup component add rustfmt
              cargo fmt -- --check

          - name: Lint
            run: |
              rustup component add clippy
              make lint

          - name: Benchmark
            run: |
              # Install deps.
              echo "=========== Installing zsh ============"
              sudo apt-get install zsh

              # Build release.
              echo "============= Compiling ==============="
              cargo build --release

              # Download data files.
              echo "========== Downloading data ==========="
              pip install gdown
              gdown 1XRZA2eki_Z8M0QrYN4BrbN7dghMYqYby
              unzip data.zip

              # Run benchmark.
              echo "========= Running benchmark ==========="
              ./scripts/benchmark.sh wikitext-2-raw

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prepare environment (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "SCCACHE_DIR=$HOME/.cache/sccache" >> $GITHUB_ENV

      - name: Prepare environment (macos-latest)
        if: matrix.os == 'macos-latest'
        run: |
          echo "SCCACHE_DIR=$HOME/Library/Caches/Mozilla.sccache" >> $GITHUB_ENV

      - name: Install sccache (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: v0.2.15
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          URL="$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz"
          echo "Downloading sccache from $URL"
          mkdir -p $HOME/.local/bin
          curl -L $URL | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          chmod +x $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install sccache (macos-latest)
        if: matrix.os == 'macos-latest'
        run: |
          # brew update  # takes forever
          brew install sccache

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Cache cargo registry and sccache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ env.SCCACHE_DIR }}
          key: ${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.task.name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.task.name }}-

      - name: Start sccache server
        run: sccache --start-server

      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}

      - name: Stop sccache server
        run: sccache --stop-server || true

  python_build_linux:
    name: Python bindings (linux, ${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64, s390x, ppc64le]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system dependencies
        run:
          sudo apt-get install -y pkg-config libssl-dev libudev-dev

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
          working-directory: bindings/python

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: bindings/python/dist

  python_build_windows:
    name: Python bindings (windows, ${{ matrix.target }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          working-directory: bindings/python

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: bindings/python/dist

  python_build_macos:
    name: Python bindings (macos, ${{ matrix.target }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          working-directory: bindings/python

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: bindings/python/dist

  python_build_sdist:
    name: Python bindings (sdist)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: bindings/python

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: bindings/python/dist

  publish_crate:
    name: Publish crate
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [rust_checks]
    steps:
      - uses: actions/checkout@v3

      - name: Install rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Log in to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_TOKEN }}

      - name: Publish to crates.io
        run: |
          cargo publish

  publish_python_bindings:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [python_build_linux, python_build_windows, python_build_macos, python_build_sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
          working-directory: bindings/python

  publish_github_release:
    name: Publish github release
    runs-on: ubuntu-latest
    needs: [publish_crate, publish_python_bindings]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare environment
        run: |
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV;

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Generate release notes
        run: |
          python scripts/generate_release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ github.workspace }}-RELEASE_NOTES.md
          prerelease: ${{ contains(env.TAG, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
